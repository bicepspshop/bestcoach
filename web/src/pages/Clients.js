import React, { useState, useEffect } from 'react';
import { ApiService } from '../services/api';

const Clients = ({ trainerId, trainer }) => {
  const [clients, setClients] = useState([]);
  const [loading, setLoading] = useState(true);
  const [showAddForm, setShowAddForm] = useState(false);
  const [newClient, setNewClient] = useState({
    first_name: '',
    last_name: '',
    phone: '',
    email: '',
    goal: ''
  });
  const [saving, setSaving] = useState(false);

  useEffect(() => {
    if (trainerId) {
      loadClients();
    }
  }, [trainerId]);

  const loadClients = async () => {
    try {
      setLoading(true);
      const data = await ApiService.getClients(trainerId);
      setClients(data || []);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤:', error);
      setClients([]);
    } finally {
      setLoading(false);
    }
  };

  const handleAddClient = async (e) => {
    e.preventDefault();
    if (!newClient.first_name.trim()) {
      alert('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞');
      return;
    }

    try {
      setSaving(true);
      const clientData = {
        ...newClient,
        trainer_id: trainerId
      };
      
      await ApiService.createClient(clientData);
      
      // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
      setNewClient({
        first_name: '',
        last_name: '',
        phone: '',
        email: '',
        goal: ''
      });
      setShowAddForm(false);
      
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
      await loadClients();
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    } finally {
      setSaving(false);
    }
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setNewClient(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const getClientInitials = (client) => {
    const first = client.first_name?.charAt(0) || '';
    const last = client.last_name?.charAt(0) || '';
    return (first + last).toUpperCase() || '?';
  };

  if (loading) {
    return (
      <div className="app-container">
        <div className="content-container">
          <div className="loading-container">
            <div className="spinner"></div>
            <div className="loading-text">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤...</div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="app-container">
      <div className="content-container fade-in">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="mb-6">
          <h1 className="page-title">–ö–ª–∏–µ–Ω—Ç—ã üë•</h1>
          <p className="page-subtitle">
            –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑–æ–π –∫–ª–∏–µ–Ω—Ç–æ–≤ ({clients.length})
          </p>
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è */}
        <div className="mb-6">
          <button 
            className="btn btn-primary btn-full btn-lg"
            onClick={() => setShowAddForm(!showAddForm)}
          >
            <span>{showAddForm ? '‚ùå' : '‚ûï'}</span>
            {showAddForm ? '–û—Ç–º–µ–Ω–∏—Ç—å' : '–î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞'}
          </button>
        </div>

        {/* –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è */}
        {showAddForm && (
          <div className="card slide-up">
            <div className="card-header">
              <h3 className="section-title">–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç</h3>
            </div>
            <form onSubmit={handleAddClient} className="card-body">
              <div className="form-group">
                <label className="form-label">–ò–º—è *</label>
                <input
                  type="text"
                  name="first_name"
                  value={newClient.first_name}
                  onChange={handleInputChange}
                  className="form-input"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è"
                  required
                />
              </div>
              
              <div className="form-group">
                <label className="form-label">–§–∞–º–∏–ª–∏—è</label>
                <input
                  type="text"
                  name="last_name"
                  value={newClient.last_name}
                  onChange={handleInputChange}
                  className="form-input"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é"
                />
              </div>
              
              <div className="form-group">
                <label className="form-label">–¢–µ–ª–µ—Ñ–æ–Ω</label>
                <input
                  type="tel"
                  name="phone"
                  value={newClient.phone}
                  onChange={handleInputChange}
                  className="form-input"
                  placeholder="+7 (999) 123-45-67"
                />
              </div>
              
              <div className="form-group">
                <label className="form-label">Email</label>
                <input
                  type="email"
                  name="email"
                  value={newClient.email}
                  onChange={handleInputChange}
                  className="form-input"
                  placeholder="client@example.com"
                />
              </div>
              
              <div className="form-group">
                <label className="form-label">–¶–µ–ª—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫</label>
                <textarea
                  name="goal"
                  value={newClient.goal}
                  onChange={handleInputChange}
                  className="form-input form-textarea"
                  placeholder="–û–ø–∏—à–∏—Ç–µ —Ü–µ–ª—å –∫–ª–∏–µ–Ω—Ç–∞..."
                  rows="3"
                />
              </div>
              
              <div className="flex" style={{ gap: '12px' }}>
                <button 
                  type="submit" 
                  className="btn btn-success btn-full"
                  disabled={saving}
                >
                  {saving ? (
                    <>
                      <div className="spinner" style={{ width: '16px', height: '16px', borderWidth: '2px' }}></div>
                      –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...
                    </>
                  ) : (
                    <>
                      <span>üíæ</span>
                      –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                    </>
                  )}
                </button>
                
                <button 
                  type="button" 
                  onClick={() => setShowAddForm(false)}
                  className="btn btn-outline"
                  disabled={saving}
                >
                  –û—Ç–º–µ–Ω–∞
                </button>
              </div>
            </form>
          </div>
        )}

        {/* –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ */}
        {clients.length === 0 ? (
          <div className="card">
            <div className="card-body">
              <div className="empty-state">
                <div className="empty-icon">üë•</div>
                <div className="empty-title">–ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤</div>
                <div className="empty-description">
                  –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏
                </div>
                {!showAddForm && (
                  <button 
                    className="btn btn-primary"
                    onClick={() => setShowAddForm(true)}
                  >
                    <span>‚ûï</span>
                    –î–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
                  </button>
                )}
              </div>
            </div>
          </div>
        ) : (
          <div className="client-grid">
            {clients.map((client, index) => (
              <div key={client.id} className="client-card fade-in" style={{ animationDelay: `${index * 0.1}s` }}>
                <div className="client-header">
                  <div className="client-avatar">
                    {getClientInitials(client)}
                  </div>
                  <div className="client-info">
                    <h3>{client.first_name} {client.last_name}</h3>
                    <p>–ö–ª–∏–µ–Ω—Ç —Å {new Date(client.created_at).toLocaleDateString()}</p>
                  </div>
                </div>
                
                {(client.phone || client.email || client.goal) && (
                  <div style={{ marginBottom: '16px' }}>
                    {client.phone && (
                      <p style={{ fontSize: '14px', color: 'var(--gray-600)', marginBottom: '4px' }}>
                        üìû {client.phone}
                      </p>
                    )}
                    {client.email && (
                      <p style={{ fontSize: '14px', color: 'var(--gray-600)', marginBottom: '4px' }}>
                        ‚úâÔ∏è {client.email}
                      </p>
                    )}
                    {client.goal && (
                      <p style={{ fontSize: '13px', color: 'var(--gray-500)', marginTop: '8px' }}>
                        üéØ {client.goal}
                      </p>
                    )}
                  </div>
                )}
                
                <div className="client-actions">
                  <button className="btn btn-outline btn-sm">
                    üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                  </button>
                  <button className="btn btn-success btn-sm">
                    üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
                  </button>
                </div>
              </div>
            ))}
          </div>
        )}

        {/* –ù–∏–∂–Ω–∏–π –æ—Ç—Å—Ç—É–ø –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ */}
        <div style={{ height: '80px' }}></div>
      </div>
    </div>
  );
};

export default Clients;