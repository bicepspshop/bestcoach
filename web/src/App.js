import React, { useState, useEffect } from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate, useLocation } from 'react-router-dom';
import { ApiService } from './services/api';
import Dashboard from './pages/Dashboard';
import Clients from './pages/Clients';
import Workouts from './pages/Workouts';
import Analytics from './pages/Analytics';
import Settings from './pages/Settings';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
const BottomNavigation = () => {
  const location = useLocation();
  
  const navItems = [
    { path: '/', icon: 'üè†', label: '–ì–ª–∞–≤–Ω–∞—è' },
    { path: '/clients', icon: 'üë•', label: '–ö–ª–∏–µ–Ω—Ç—ã' },
    { path: '/workouts', icon: 'üèãÔ∏è', label: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏' },
    { path: '/analytics', icon: 'üìä', label: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞' },
    { path: '/settings', icon: '‚öôÔ∏è', label: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' }
  ];

  const handleNavClick = (path) => {
    window.location.hash = `#${path}`;
  };

  return (
    <div className="bottom-nav">
      <div className="nav-container">
        {navItems.map((item) => (
          <button
            key={item.path}
            className={`nav-item ${location.pathname === item.path ? 'active' : ''}`}
            onClick={() => handleNavClick(item.path)}
          >
            <span className="nav-icon">{item.icon}</span>
            <span className="nav-label">{item.label}</span>
          </button>
        ))}
      </div>
    </div>
  );
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞–≥—Ä—É–∑–∫–∏
const LoadingScreen = () => (
  <div className="app-container">
    <div className="content-container">
      <div className="loading-container">
        <div className="spinner"></div>
        <div className="loading-text">–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...</div>
      </div>
    </div>
  </div>
);

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –æ—à–∏–±–∫–∏
const ErrorScreen = ({ error, onRetry }) => (
  <div className="app-container">
    <div className="content-container">
      <div className="card text-center">
        <div className="card-body">
          <div style={{ fontSize: '48px', marginBottom: '16px' }}>‚ö†Ô∏è</div>
          <h2 style={{ fontSize: '20px', fontWeight: '600', marginBottom: '8px', color: 'var(--gray-800)' }}>
            –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
          </h2>
          <p style={{ color: 'var(--gray-600)', marginBottom: '24px' }}>
            {error || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}
          </p>
          <button className="btn btn-primary" onClick={onRetry}>
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </button>
        </div>
      </div>
    </div>
  </div>
);

function App() {
  const [trainer, setTrainer] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    initializeApp();
  }, []);

  const initializeApp = async () => {
    try {
      setLoading(true);
      setError(null);
      
      // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      let telegramId = null;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram WebApp
      if (window.Telegram?.WebApp?.initDataUnsafe?.user) {
        telegramId = window.Telegram.WebApp.initDataUnsafe.user.id;
        console.log('Telegram ID –ø–æ–ª—É—á–µ–Ω:', telegramId);
      } else {
        // Fallback –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const urlParams = new URLSearchParams(window.location.search);
        telegramId = urlParams.get('telegram_id') || Date.now().toString();
        console.log('–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–π ID:', telegramId);
      }

      // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Ç—Ä–µ–Ω–µ—Ä–∞
      let trainerData = await ApiService.getTrainerByTelegramId(telegramId);
      
      if (!trainerData) {
        console.log('–¢—Ä–µ–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ...');
        
        const newTrainerData = {
          telegram_id: parseInt(telegramId),
          first_name: window.Telegram?.WebApp?.initDataUnsafe?.user?.first_name || '–¢—Ä–µ–Ω–µ—Ä',
          last_name: window.Telegram?.WebApp?.initDataUnsafe?.user?.last_name || '',
          username: window.Telegram?.WebApp?.initDataUnsafe?.user?.username || null,
          is_active: true
        };
        
        try {
          trainerData = await ApiService.createTrainer(newTrainerData);
          console.log('–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ç—Ä–µ–Ω–µ—Ä:', trainerData);
        } catch (createError) {
          console.warn('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–Ω–µ—Ä–∞:', createError);
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
          trainerData = {
            id: `temp-${telegramId}`,
            telegram_id: parseInt(telegramId),
            first_name: newTrainerData.first_name,
            last_name: newTrainerData.last_name,
            is_active: true
          };
        }
      }
      
      console.log('–¢—Ä–µ–Ω–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', trainerData);
      setTrainer(trainerData);
      
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', err);
      setError(err.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ');
    } finally {
      setLoading(false);
    }
  };

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
  if (loading) {
    return <LoadingScreen />;
  }

  if (error) {
    return <ErrorScreen error={error} onRetry={initializeApp} />;
  }

  if (!trainer) {
    return <ErrorScreen error="–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–µ—Ä–∞" onRetry={initializeApp} />;
  }

  return (
    <Router>
      <div className="app-container">
        <Routes>
          <Route 
            path="/" 
            element={<Dashboard trainer={trainer} />} 
          />
          <Route 
            path="/clients" 
            element={<Clients trainerId={trainer.id} trainer={trainer} />} 
          />
          <Route 
            path="/workouts" 
            element={<Workouts trainerId={trainer.id} trainer={trainer} />} 
          />
          <Route 
            path="/analytics" 
            element={<Analytics trainerId={trainer.id} trainer={trainer} />} 
          />
          <Route 
            path="/settings" 
            element={<Settings trainer={trainer} setTrainer={setTrainer} />} 
          />
          <Route path="*" element={<Navigate to="/" replace />} />
        </Routes>
        
        <BottomNavigation />
      </div>
    </Router>
  );
}

export default App;