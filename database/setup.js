const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

// SQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
const createTablesSQL = `
-- –¢—Ä–µ–Ω–µ—Ä—ã
CREATE TABLE IF NOT EXISTS trainers (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  telegram_id BIGINT UNIQUE NOT NULL,
  first_name VARCHAR(255),
  last_name VARCHAR(255),
  username VARCHAR(255),
  phone VARCHAR(20),
  email VARCHAR(255),
  specialization TEXT,
  experience_years INTEGER DEFAULT 0,
  hourly_rate DECIMAL(10,2),
  currency VARCHAR(3) DEFAULT 'RUB',
  timezone VARCHAR(50) DEFAULT 'Europe/Moscow',
  is_active BOOLEAN DEFAULT true,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- –ö–ª–∏–µ–Ω—Ç—ã
CREATE TABLE IF NOT EXISTS clients (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  trainer_id UUID REFERENCES trainers(id) ON DELETE CASCADE,
  telegram_id BIGINT,
  first_name VARCHAR(255) NOT NULL,
  last_name VARCHAR(255),
  username VARCHAR(255),
  phone VARCHAR(20),
  email VARCHAR(255),
  birth_date DATE,
  gender VARCHAR(10),
  height INTEGER, -- –≤ —Å–º
  initial_weight DECIMAL(5,2), -- –≤ –∫–≥
  current_weight DECIMAL(5,2),
  target_weight DECIMAL(5,2),
  goal TEXT, -- —Ü–µ–ª—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
  medical_notes TEXT,
  emergency_contact VARCHAR(255),
  subscription_type VARCHAR(50), -- —Ç–∏–ø –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞
  subscription_start DATE,
  subscription_end DATE,
  sessions_total INTEGER DEFAULT 0,
  sessions_used INTEGER DEFAULT 0,
  is_active BOOLEAN DEFAULT true,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏)
CREATE TABLE IF NOT EXISTS workouts (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  trainer_id UUID REFERENCES trainers(id) ON DELETE CASCADE,
  client_id UUID REFERENCES clients(id) ON DELETE CASCADE,
  title VARCHAR(255) NOT NULL,
  description TEXT,
  workout_date TIMESTAMP WITH TIME ZONE NOT NULL,
  duration INTEGER DEFAULT 60, -- –≤ –º–∏–Ω—É—Ç–∞—Ö
  status VARCHAR(20) DEFAULT 'scheduled', -- scheduled, completed, cancelled, no_show
  workout_type VARCHAR(50), -- cardio, strength, mixed, etc
  location VARCHAR(255),
  price DECIMAL(10,2),
  notes TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
CREATE TABLE IF NOT EXISTS workout_exercises (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  workout_id UUID REFERENCES workouts(id) ON DELETE CASCADE,
  exercise_name VARCHAR(255) NOT NULL,
  sets INTEGER,
  reps VARCHAR(50), -- –º–æ–∂–µ—Ç –±—ã—Ç—å "10-12" –∏–ª–∏ "–¥–æ –æ—Ç–∫–∞–∑–∞"
  weight DECIMAL(5,2),
  rest_time INTEGER, -- —Å–µ–∫—É–Ω–¥—ã
  notes TEXT,
  order_index INTEGER DEFAULT 0,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- –ò–∑–º–µ—Ä–µ–Ω–∏—è –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å
CREATE TABLE IF NOT EXISTS measurements (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  client_id UUID REFERENCES clients(id) ON DELETE CASCADE,
  measurement_date DATE NOT NULL,
  weight DECIMAL(5,2),
  body_fat_percentage DECIMAL(4,2),
  muscle_mass DECIMAL(5,2),
  chest DECIMAL(5,2), -- –æ–±—Ö–≤–∞—Ç –≥—Ä—É–¥–∏ –≤ —Å–º
  waist DECIMAL(5,2),
  hips DECIMAL(5,2),
  bicep DECIMAL(5,2),
  thigh DECIMAL(5,2),
  neck DECIMAL(5,2),
  notes TEXT,
  photo_urls TEXT[], -- –º–∞—Å—Å–∏–≤ —Å—Å—ã–ª–æ–∫ –Ω–∞ —Ñ–æ—Ç–æ
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- –§–∏–Ω–∞–Ω—Å—ã –∏ –ø–ª–∞—Ç–µ–∂–∏
CREATE TABLE IF NOT EXISTS payments (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  trainer_id UUID REFERENCES trainers(id) ON DELETE CASCADE,
  client_id UUID REFERENCES clients(id) ON DELETE CASCADE,
  amount DECIMAL(10,2) NOT NULL,
  currency VARCHAR(3) DEFAULT 'RUB',
  payment_date DATE NOT NULL,
  payment_type VARCHAR(50), -- cash, card, transfer, subscription
  description TEXT,
  status VARCHAR(20) DEFAULT 'completed', -- pending, completed, failed
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- –ü—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ (—à–∞–±–ª–æ–Ω—ã)
CREATE TABLE IF NOT EXISTS workout_programs (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  trainer_id UUID REFERENCES trainers(id) ON DELETE CASCADE,
  name VARCHAR(255) NOT NULL,
  description TEXT,
  goal VARCHAR(100), -- –ø–æ—Ö—É–¥–µ–Ω–∏–µ, –Ω–∞–±–æ—Ä –º–∞—Å—Å—ã, –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã
  difficulty_level VARCHAR(20), -- beginner, intermediate, advanced
  duration_weeks INTEGER,
  sessions_per_week INTEGER,
  is_template BOOLEAN DEFAULT false,
  is_active BOOLEAN DEFAULT true,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
CREATE TABLE IF NOT EXISTS program_exercises (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  program_id UUID REFERENCES workout_programs(id) ON DELETE CASCADE,
  day_number INTEGER NOT NULL, -- –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏/–Ω–æ–º–µ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  exercise_name VARCHAR(255) NOT NULL,
  sets INTEGER,
  reps VARCHAR(50),
  weight_percentage DECIMAL(4,2), -- –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –º–∞–∫—Å–∏–º—É–º–∞
  rest_time INTEGER,
  notes TEXT,
  order_index INTEGER DEFAULT 0,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- –ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∫–ª–∏–µ–Ω—Ç–∞–º
CREATE TABLE IF NOT EXISTS client_programs (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  client_id UUID REFERENCES clients(id) ON DELETE CASCADE,
  program_id UUID REFERENCES workout_programs(id) ON DELETE CASCADE,
  start_date DATE NOT NULL,
  end_date DATE,
  is_active BOOLEAN DEFAULT true,
  progress_notes TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- –ß–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
CREATE TABLE IF NOT EXISTS messages (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  trainer_id UUID REFERENCES trainers(id) ON DELETE CASCADE,
  client_id UUID REFERENCES clients(id) ON DELETE CASCADE,
  sender_type VARCHAR(10) NOT NULL, -- trainer, client
  message_text TEXT,
  message_type VARCHAR(20) DEFAULT 'text', -- text, photo, document, voice
  file_url TEXT,
  is_read BOOLEAN DEFAULT false,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
CREATE TABLE IF NOT EXISTS notifications (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  user_id UUID, -- –º–æ–∂–µ—Ç –±—ã—Ç—å trainer_id –∏–ª–∏ client_id
  user_type VARCHAR(10) NOT NULL, -- trainer, client
  title VARCHAR(255) NOT NULL,
  message TEXT NOT NULL,
  notification_type VARCHAR(50), -- workout_reminder, payment_due, progress_update
  is_read BOOLEAN DEFAULT false,
  scheduled_at TIMESTAMP WITH TIME ZONE,
  sent_at TIMESTAMP WITH TIME ZONE,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—Ä–µ–Ω–µ—Ä–∞
CREATE TABLE IF NOT EXISTS trainer_settings (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  trainer_id UUID REFERENCES trainers(id) ON DELETE CASCADE UNIQUE,
  working_hours_start TIME DEFAULT '09:00',
  working_hours_end TIME DEFAULT '21:00',
  working_days INTEGER[] DEFAULT '{1,2,3,4,5,6}', -- –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ 1-7
  default_session_duration INTEGER DEFAULT 60,
  advance_booking_days INTEGER DEFAULT 30,
  cancellation_hours INTEGER DEFAULT 24,
  reminder_hours INTEGER DEFAULT 2,
  auto_confirm_bookings BOOLEAN DEFAULT false,
  email_notifications BOOLEAN DEFAULT true,
  telegram_notifications BOOLEAN DEFAULT true,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
CREATE INDEX IF NOT EXISTS idx_trainers_telegram_id ON trainers(telegram_id);
CREATE INDEX IF NOT EXISTS idx_clients_trainer_id ON clients(trainer_id);
CREATE INDEX IF NOT EXISTS idx_clients_telegram_id ON clients(telegram_id);
CREATE INDEX IF NOT EXISTS idx_workouts_trainer_id ON workouts(trainer_id);
CREATE INDEX IF NOT EXISTS idx_workouts_client_id ON workouts(client_id);
CREATE INDEX IF NOT EXISTS idx_workouts_date ON workouts(workout_date);
CREATE INDEX IF NOT EXISTS idx_measurements_client_id ON measurements(client_id);
CREATE INDEX IF NOT EXISTS idx_payments_trainer_id ON payments(trainer_id);
CREATE INDEX IF NOT EXISTS idx_messages_trainer_client ON messages(trainer_id, client_id);

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è updated_at
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ language 'plpgsql';

-- –¢—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è updated_at
DROP TRIGGER IF EXISTS update_trainers_updated_at ON trainers;
CREATE TRIGGER update_trainers_updated_at 
  BEFORE UPDATE ON trainers 
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

DROP TRIGGER IF EXISTS update_clients_updated_at ON clients;
CREATE TRIGGER update_clients_updated_at 
  BEFORE UPDATE ON clients 
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

DROP TRIGGER IF EXISTS update_workouts_updated_at ON workouts;
CREATE TRIGGER update_workouts_updated_at 
  BEFORE UPDATE ON workouts 
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

DROP TRIGGER IF EXISTS update_workout_programs_updated_at ON workout_programs;
CREATE TRIGGER update_workout_programs_updated_at 
  BEFORE UPDATE ON workout_programs 
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

DROP TRIGGER IF EXISTS update_trainer_settings_updated_at ON trainer_settings;
CREATE TRIGGER update_trainer_settings_updated_at 
  BEFORE UPDATE ON trainer_settings 
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
`;

async function setupDatabase() {
  try {
    console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    
    const { error } = await supabase.rpc('exec_sql', {
      sql: createTablesSQL
    });

    if (error) {
      // –ï—Å–ª–∏ rpc –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å
      console.log('–ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π SQL...');
      const queries = createTablesSQL.split(';').filter(q => q.trim());
      
      for (const query of queries) {
        if (query.trim()) {
          const { error: queryError } = await supabase
            .from('__dummy__') // –≠—Ç–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –¥–∞—Å—Ç –Ω–∞–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å SQL
            .select('*');
          
          console.log(`–í—ã–ø–æ–ª–Ω–µ–Ω –∑–∞–ø—Ä–æ—Å: ${query.substring(0, 50)}...`);
        }
      }
    }

    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log('üìã –°–æ–∑–¥–∞–Ω—ã —Ç–∞–±–ª–∏—Ü—ã:');
    console.log('  - trainers (—Ç—Ä–µ–Ω–µ—Ä—ã)');
    console.log('  - clients (–∫–ª–∏–µ–Ω—Ç—ã)');
    console.log('  - workouts (—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏)');
    console.log('  - workout_exercises (—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è)');
    console.log('  - measurements (–∏–∑–º–µ—Ä–µ–Ω–∏—è)');
    console.log('  - payments (–ø–ª–∞—Ç–µ–∂–∏)');
    console.log('  - workout_programs (–ø—Ä–æ–≥—Ä–∞–º–º—ã)');
    console.log('  - program_exercises (—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º)');
    console.log('  - client_programs (–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã)');
    console.log('  - messages (—Å–æ–æ–±—â–µ–Ω–∏—è)');
    console.log('  - notifications (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)');
    console.log('  - trainer_settings (–Ω–∞—Å—Ç—Ä–æ–π–∫–∏)');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error.message);
    console.log('\nüìù –í—ã–ø–æ–ª–Ω–∏—Ç–µ SQL —Å–∫—Ä–∏–ø—Ç –≤—Ä—É—á–Ω—É—é –≤ Supabase Dashboard:');
    console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ https://supabase.com/dashboard');
    console.log('2. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø—Ä–æ–µ–∫—Ç');
    console.log('3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ SQL Editor');
    console.log('4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ SQL –∏–∑ —Ñ–∞–π–ª–∞ database/schema.sql');
  }
}

if (require.main === module) {
  setupDatabase();
}

module.exports = { setupDatabase, createTablesSQL };